plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'com.google.gms.google-services'
}

android {
    namespace 'com.yaman.androidjetpackcomponents'
    compileSdk 33

    defaultConfig {
        applicationId "com.yaman"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            ext.config = getProps('../config/dev.properties')

            ext.config.each { p ->
                if (p.key == "APPNAME") {
                    resValue "string", "app_name", p.value
                } else if (p.key == "APPLICATION_ID_SUFFIX") {
                    applicationIdSuffix p.value
                } else {
                    buildConfigField 'String', p.key, p.value
                }
            }

        }

        staging {
            debuggable true // debug and run app in device
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            ext.config = getProps('../config/staging.properties')

            ext.config.each { p ->
                if (p.key == "APPNAME") {
                    resValue "string", "app_name", p.value
                } else if (p.key == "APPLICATION_ID_SUFFIX") {
                    applicationIdSuffix p.value
                } else {
                    buildConfigField 'String', p.key, p.value
                }
            }
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            ext.config = getProps('../config/release.properties')

            ext.config.each { p ->
                if (p.key == "APPNAME") {
                    resValue "string", "app_name", p.value
                } else if (p.key == "APPLICATION_ID_SUFFIX") {
                    applicationIdSuffix p.value
                } else {
                    buildConfigField 'String', p.key, p.value
                }
            }

        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        dataBinding true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.1.1'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'

    //***************
    // Retrofit - Gson - OkHttp
    // *************//
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    // gson convertor
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    // gson
    implementation 'com.google.code.gson:gson:2.10'
    // okhttp
    implementation "com.squareup.okhttp3:logging-interceptor:4.10.0"

    //***************
    // Dagger - Hilt
    // *************//
    implementation "com.google.dagger:hilt-android:2.44"
    kapt "com.google.dagger:hilt-compiler:2.44"

    //***************
    // Room Database
    // *************//
    implementation "androidx.room:room-runtime:2.4.3"
    annotationProcessor "androidx.room:room-compiler:2.4.3"
    // To use Kotlin annotation processing tool (kapt)
    kapt "androidx.room:room-compiler:2.4.3"
    // optional - Paging 3 Integration
    implementation "androidx.room:room-paging:2.4.3"

    //***************
    // Paging
    // *************//
    implementation "androidx.paging:paging-runtime:3.1.1"
    // optional - Jetpack Compose integration
    implementation "androidx.paging:paging-compose:1.0.0-alpha17"

    //***************
    // Android - KTX
    // *************//
    implementation "androidx.core:core-ktx:1.9.0"
    /* implementation "androidx.collection:collection-ktx:1.2.0"
    implementation "androidx.fragment:fragment-ktx:1.5.5"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.5.1"
    implementation "androidx.navigation:navigation-runtime-ktx:2.5.3"
    implementation "androidx.navigation:navigation-fragment-ktx:2.5.3"
    implementation "androidx.navigation:navigation-ui-ktx:2.5.3"
    implementation "androidx.palette:palette-ktx:1.0.0"
    implementation "androidx.room:room-ktx:2.4.3"
    implementation "androidx.work:work-runtime-ktx:2.7.1"
*/


    //***************
    // Compose UI
    // *************//
    implementation "androidx.activity:activity-compose:1.6.1"
    implementation "androidx.compose.ui:ui:1.3.2"
    implementation "androidx.compose.ui:ui-tooling-preview:1.3.2"


    //***************
    // Firebase BOM
    // *************//
    implementation platform('com.google.firebase:firebase-bom:31.1.1')
    implementation 'com.google.firebase:firebase-analytics'

    // Library Store
    
}

//TODO: Get Config Properties
def getProps(path) {

    Properties props = new Properties()

    props.load(new FileInputStream(file(path)))

    return props

}